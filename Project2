#include <iostream>
#include <iomanip>
#include <vector>
#include <string>
#include <utility>

using namespace std;

class Product {
public:
    int id;
    string name;
    double price;
    int quantity;

    Product(int id, string name, double price, int quantity) {
        this->id = id;
        this->name = name;
        this->price = price;
        this->quantity = quantity;
    }
};

class SupermarketBillingSystem {
private:
    vector<Product> inventory;

public:
    void addProduct(int id, string name, double price, int quantity) {
        inventory.push_back(Product(id, name, price, quantity));
    }

    void displayInventory() {
        cout<< "ID\tName\t\tPrice\tQuantity"<< endl;
        for(const auto& product :inventory) {
            cout<< product.id << "\t" << product.name << "\t\t$" << fixed << setprecision(2) << product.price << "\t" << product.quantity << endl;
        }
    }

    void processTransaction() {
        int productId, quantity;
        char more;
        double subtotal = 0.0, discount = 0.0, tax = 0.0, total = 0.0;
        vector<pair<string, double> > billDetails;

        do{
            cout << "Enter Product ID to purchase: ";
            cin >> productId;
            cout << "Enter quantity: ";
            cin >> quantity;

            bool found = false;
            for(auto& product : inventory) {
                if(product.id == productId && product.quantity >= quantity) {
                    double itemTotal = product.price * quantity;
                    subtotal += itemTotal;
                    product.quantity -= quantity;
                    billDetails.push_back({product.name, itemTotal});
                    found = true;
                    break;
                }
            }

            if(!found) {
                cout << "Product not found or insufficient stock!" << endl;
            }

            cout<< "Add more items? (y/n): ";
            cin>> more;
        } while(more == 'y');

        // Discount and Tax Calculation
        if(subtotal > 100) {
            discount = 0.1 * subtotal; // 10% discount on subtotal over $100
        }
        tax = 0.08 * subtotal; // 8% sales tax
        total = subtotal - discount + tax;

        generateReceipt(billDetails, subtotal, discount, tax, total);
    }

    void generateReceipt(const vector<pair<string, double> >& billDetails, double subtotal, double discount, double tax, double total) {
        cout << "\n--- Receipt ---\n";
        cout << "Item\t\tPrice" << endl;
        for(const auto& item : billDetails) {
            cout<< item.first << "\t\t$" << fixed << setprecision(2) << item.second << endl;
        }
        cout<< "-----------------------------" << endl;
        cout<< "Subtotal:\t\t$" << subtotal << endl;
        cout<< "Discount:\t\t$" << discount << endl;
        cout<< "Tax (8%):\t\t$" << tax << endl;
        cout<< "Total:\t\t\t$" << total << endl;
    }

    void reorderStock() {
        cout << "\n--- Stock Reorder ---\n";
        for(auto& product : inventory) {
            if(product.quantity < 5) {
                int reorderQuantity;
                cout << "Stock for " << product.name << " is low (" << product.quantity << " units left)." << endl;
                cout << "Enter the quantity to reorder: ";
                cin >> reorderQuantity;
                product.quantity += reorderQuantity; // Reorder based on user input
                cout << "Reordered " << reorderQuantity << " units of " << product.name << ". New stock: " << product.quantity << endl;
            }
        }
    }

};

int main() {
    SupermarketBillingSystem system;

    // Adding initial products to inventory
    system.addProduct(1, "Milk", 3.50, 20);
    system.addProduct(2, "Bread", 2.00, 15);
    system.addProduct(3, "Eggs", 5.00, 8);
    system.addProduct(4, "Butter", 4.00, 10);
    system.addProduct(5, "Juice", 7.00, 4);

    int choice;
    do{
        cout << "\nSupermarket Billing System\n";
        cout << "1. Display Inventory\n2. Process Transaction\n3. Reorder Stock\n4. Exit\n";
        cout << "Choose an option: ";
        cin >> choice;

        switch(choice){
            case 1:
                system.displayInventory();
                break;
            case 2:
                system.processTransaction();
                break;
            case 3:
                system.reorderStock();
                break;
            case 4:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice! Please try again.\n";
                break;
        }
    } while(choice != 4);

    return 0;
}
